테이블에 데이터 추가하기

INSERT

INSERT INTO 테이블명(컬럼명1, 컬럼명2...) VALUES(값1, 값2...);
DEFAULT 값을 넣고싶을 때

INSERT INTO 테이블명 VALUES(값1, 값2...);
무조건 컬럼의 개수만큼 값을 대입해야 한다.

다른 테이블의 데이터를 조회해서 추가하기
INSERT INTO 테이블명(컬럼명1, 컬럼명2...)
SELECT 컬럼1, 컬럼2..
FROM 테이블
WHERE 조건;

각각의 테이블에 데이터를 추가하기
INSERT ALL
  INTO 테이블A(컬럼1, 컬럼2...) VALUES (값1, 값2)
  INTO 테이블B(컬럼3, 컬럼4...) VALUES (값3, 값4);

조회 -> 테이블에 영향이 없음
추가, 삭제, 수정 -> 테이블에 영향을 준다.

DELETE
조건에 맞는 데이터를 테이블에서 삭제

DELETE FROM 테이블명
WHERE 조건식

// TRUNCATE
테이블 안에 있는 데이터를 싹 날린다.

수정하기
UPDATE
- 테이블의 데이터를 수정할 때 사용하는 키워드

UPDATE 테이블명 SET 
컬럼명 = 새로운 값,
컬럼명 = 새로운 값,
컬럼명 = 새로운 값
WHERE 조건식;  // 중요!

// 조건식을 달지 않으면 테이블 전체에서 데이터가 수정된다.

ORDER BY(정렬)
- 질의결과에 반환되는 행들을 특정 기준으로 정렬하고자 할 떄 사용
- ORDER BY 절은 SELECT 절의 가장 마지막에 기술
- ASC : 오름차순(DEFAULT 이기 때문에 생략 가능)
- DESC : 내림차순(생략 불가능)

사용방법

FROM 테이블명 ORDER BY 컬럼명 정렬 방향;
FROM 테이블명 WHERE 조건식 ORDER BY 컬럼명 정렬방향;
FROM 테이블명 WHRE 조건식 ORDER BY 컬럼명 정렬방향, 컬럼명 정렬방향;
-------------------------------------------------------------------------------
정규화
- 모델링을 잘 하면서 테이블을 만들었지만 불필요한 컬럼이라던지 불필요한 요소를 걸러내는 작업이다. 
- 1차 ~ 5차까지 존재하지만 정규화를 진행할 수도 테이블을 계속 분리하기 때문에 데이터를 가져오는 작업을 할 때 불편하다.
- 그렇기 때문에 보통 3차 정규화 작업까지만 진행한다.

정규화의 이점
- 불필요한 데이터 반복을 제거함으로써 저장공간을 최소화 할 수 있으며, 데이터의 변경시 불일치성을 최소화 하고, 연산작업을 최소화 할 수 있다.

정규화 안된 테이블
-> 1차 정규화 (도메인 원자값이어야 한다.)
	(1차 정규화를 만족하며 부분함수 종속이 해소되어야 한다)
-> 2차 정규화 (관련있는 컬럼끼리 테이블을 분리한다.)
	(2차 정규화를 만족하며 이행함수 종속이 해소되어야 함
-> 3차 정규화(이행함수 종속을 쪼개서 따로 테이블로 만든다. 하나의 컬럼이 다른 컬럼을 대표할 수 없다.)
	(3차를 만족하며 모든 컬럼이 후보키가 되도록 테이블을 분해하는것)
--> BCNF 정규화
->5차 정규화

함수적 종속성
- 하나의 테이블에서 한 컬럼의 값(X)가 다른 컬럼의 값(Y)을 결정하는 관계
- 정규화가 잘 된 테이블일수록 결정자 X는 PK한개이고 종속자가 여러개인 구조를 가진다.

완전함수 종속
- 종속자가 기본키에만 종속되며, 기본키가 여러 속성으로 구성되어 있을 경우
- 기본키를 구성하는 모든 속성이 포함된 기본키의 부분집합에 종속된 경우

부분함수 종속
- 기본키가 복합키일 경우 기본키를 구성하는 속성 중 일부에게 종속된 경우를 말한다.

이행함수종속
- 테이블에서 X,Y,Z라는 세 개의 컬럼이 존재할 때 X -> Y / Y -> Z 라는 종속관계가 있을때, X -> Z가 성립되는 것.

이상현상(Anormally)
삽입이상 - 새 데이터를 삽입하기 위해 불필요한 데이터도 삽입해야 하는 문제

갱신이상 - 일부만 변경되어 데이터가 불일치하게 되는 현상

삭제이상 - 행을 삭제할 때 필요한 데이터까지 함께 삭제되는 현상

정규화는 논리모델링을 할 때 실시한다.

SQL 함수
- 사용자가 필요한 기능을 만드는 함수가 아닌, 오라클 자체적으로 제공하는 함수
- 이 상황에 맞는 적절한 함수를 사용하기 위해서는 어떤 기능을 하는 함수들이 존재하는지 정확하게 파악하고 있어야 한다.

내장함수의 종류
- 단일행 함수 : 1개의 행값이 함수에 적용되어 1개의 행을 반환
- 집계함수 : 1개 이상의 행의 값이 함수에 적용되어 1개의 값을 반환한다.
-------------------------------------------------------------------------------

1. 정규화의 필요성으로 거리가 먼 것은? 2

1. 데이터 구조의 안정성 최대화
2 중복 데이터의 활성화
3 데이터 수정, 삭제 시 이상현상의 최소화
4 테이블 불일치 위험의 최소화

2. 관계 데이터베이스의 정규화에 대한 설명으로 옳지 않은 것은? 2

1. 정규화를 거치지 않으면 여러 가지 다른 종류의 정보가 하나의 릴레이션에 표현되기 때문에 릴레이션을 조작할 때 이상현상이 발생할 수 있다.
2. 정규화의 목적은 각 릴레이션에 분산된 종속성을 하나의 릴레이션에 통합하는 것이다.
3. 이상현상은 속성 간에 존재하는 함수 종속성이 원인이다.
4. 정규화가 잘못되면 데이터의 불필요한 중복을 야기하여 릴레이션을 조작할 때 문제가 된다.

3. 제2정규형에서 제3정규형이 되기 위한 조건은? 1

1. 이행적 함수 종속을 제거해야 한다.
2. 부분 함수 종속을 제거해야 한다.
3. 다치종속을 제거해야 한다.
4. 결정자가 후보키가 아닌 함수적 종속을 제거해야 한다.

스키마에 대해 아는대로
데이터베이스의 제약 조건에 대해 전반적인 명세를 기술한 것

개념 - 전체적인 뷰
내부 - 데이터를 어디에 저장을 할 것인가
외부 - 사용자 입장에서 어떻게 사용할 것인가



















































